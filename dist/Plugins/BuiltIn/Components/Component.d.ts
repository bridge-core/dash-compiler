import { ProjectConfig } from '@bridge-editor/mc-project-core';
import { Console } from '../../../Common/Console';
import { Runtime } from '@bridge-editor/js-runtime';
export declare type TTemplate = (componentArgs: any, opts: any) => any;
export declare class Component {
    protected console: Console;
    protected fileType: string;
    protected componentSrc: string;
    protected mode: 'production' | 'development';
    protected v1Compat: boolean;
    protected targetVersion?: string | undefined;
    protected _name?: string;
    protected schema?: any;
    protected template?: TTemplate;
    protected animations: [any, string | false | undefined][];
    protected animationControllers: [any, string | false | undefined][];
    protected createOnPlayer: [string, any, any][];
    protected dialogueScenes: Record<string, any[]>;
    protected serverFiles: [string, any][];
    protected clientFiles: Record<string, any>;
    protected projectConfig?: ProjectConfig;
    protected lifecycleHookCount: {
        activated: number;
        deactivated: number;
    };
    constructor(console: Console, fileType: string, componentSrc: string, mode: 'production' | 'development', v1Compat: boolean, targetVersion?: string | undefined);
    setProjectConfig(projectConfig: ProjectConfig): void;
    get name(): string | undefined;
    load(jsRuntime: Runtime, filePath: string, type?: 'server' | 'client'): Promise<boolean>;
    reset(): void;
    getSchema(): any;
    toString(): string;
    create(fileContent: any, template: any, location?: string, operation?: (deepMerge: (oldData: any, newData: any) => any, oldData: any, newData: any) => any): void;
    protected getObjAtLocation(fileContent: any, location: string[]): any;
    processTemplates(fileContent: any, componentArgs: any, location: string): Promise<void>;
    processAdditionalFiles(filePath: string, fileContent: any, isPlayerFile?: boolean): Promise<{}>;
    protected createAnimations(fileName: string, fileContent: any): string | undefined;
    protected createAnimationControllers(fileName: string, fileContent: any): string | undefined;
    protected getAnimName(prefix: string, fileName: string, id: number): string;
    protected getShortAnimName(category: string, fileName: string, id: number): string;
    protected registerLifecycleHook(fileContent: any, location: string, eventResponse: any, permutationEventName: string, type: 'activated' | 'deactivated'): void;
    protected addEventReponse(event: any, eventResponse: any): void;
    protected findComponentGroupReferences(events: any, type: 'add' | 'remove', componentGroupName: string): any[];
}
